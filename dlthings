#!/usr/bin/env python3
# Download all my Things

import argparse
import configparser
import json
import os
import requests


CONFIGFILE   = './config'


def getAuthedUrl(thisUrl, outFormat="bytes"):
    """ Fetch a URL and return None if failure, else data in bytes or outFormat format """
    resp = requests.get(thisUrl, headers=authHeader)
    if resp.status_code != 200:
        print("Got code {} for URL {}".format(resp.status_code, thisUrl))
        return None
    if outFormat == "json":
        return resp.json()
    else:
        return resp.content


def checkMkDirs(thisPath):
    """ Create a directory path if it doesn't exist """
    if not os.path.isdir(thisPath):
        os.makedirs(thisPath)
    return True


def getFiles(thisThing):
    """ Download object files for a given Thing """
    # curl -s -X GET -H 'Authorization: Bearer TOKEN' 'https://api.thingiverse.com/things/3831190/files'
    numFiles = 0

    fileData = getAuthedUrl(apiUrl + "/things/" + str(thisThing) + "/files", "json")
    if fileData is None:
        print("Failed to get file info for thing {}".format(thisThing), flush=True)
        return None

    for thisFile in fileData:
        fileName = thisFile['name']
        fileUrl = thisFile['download_url']
        destDir = outDir + "/" + str(thisThing) + "/files"
        checkMkDirs(destDir)

        if os.path.exists(destDir + "/" + fileName):
            print("~> {}".format(destDir + "/" + fileName), flush=True)
            continue

        # Get the file contents as bytes
        thisFileContent = getAuthedUrl(fileUrl)

        with open(destDir + "/" + fileName, "wb") as outFile:
            outFile.write(thisFileContent)
        print("+> {}".format(destDir + "/" + fileName), flush=True)
        numFiles += 1

    return numFiles
        

def getPhotos(thisThing):
    """ Download large size photos for a given Thing """
    # curl -s -X GET -H 'Authorization: Bearer TOKEN' 'https://api.thingiverse.com/things/3831190/images'
    numPhotos = 0

    photoData = getAuthedUrl(apiUrl + "/things/" + str(thisThing) + "/images", "json")
    if photoData is None:
        print("Failed to get photo info for thing {}".format(thisThing), flush=True)
        return None

    for thisPhoto in photoData:
        photoName = thisPhoto['name']
        for thisVersion in thisPhoto['sizes']:
            if thisVersion['type'] == "display" and thisVersion['size'] == "large":
                photoUrl = thisVersion['url']
                break
        destDir = outDir + "/" + str(thisThing) + "/photos"
        checkMkDirs(destDir)

        if not photoUrl:
            print("Couldn't find URL for photo: {}".format(photoName), flush=True)
            continue

        if os.path.exists(destDir + "/" + photoName):
            print("~> {}".format(destDir + "/" + photoName), flush=True)
            continue

        # Get the file contents as bytes
        thisPhotoContent = getAuthedUrl(photoUrl)

        with open(destDir + "/" + photoName, "wb") as outFile:
            outFile.write(thisPhotoContent)
        print("+> {}".format(destDir + "/" + photoName), flush=True)
        numPhotos += 1

    return numPhotos
        

# Read args from CLI
parser = argparse.ArgumentParser()
parser.add_argument(
    "-u", "--user", 
    default=None,
    help="Thingiverse user whose Things you're downloading"
)
parser.add_argument(
    "-o", "--outdir", 
    nargs='?', 
    default="/tmp", 
    help="DIRECTORY to download things into"
)
args = parser.parse_args()


# Load from config file
config = configparser.ConfigParser()
config.read(CONFIGFILE)

# Script globals
thingiverseUser = args.user
outDir = args.outdir
apiUrl = config['main']['API_URL']
authHeader = { "Authorization": "Bearer " + config['main']['APP_TOKEN'] }
manifestFile = outDir + "/" + config['main']['MANIFEST_FILE']
thingFileName = config['main']['THING_FILE']

# Bail if no user was specified
if thingiverseUser is None:
    print("You didn't specify a username.  Bye!")
    quit()

# Get list of my Things
# curl -s -X GET -H 'Authorization: Bearer TOKEN' 'https://api.thingiverse.com/users/me/things'
thingList = getAuthedUrl(apiUrl + "/users/" + thingiverseUser + "/things", "json")
if thingList is None:
    print("Failed to get Thing list for user {}, so quitting.  Bye!".format(thingiverseUser))
    quit()


# Create output directory if it doesn't exist
checkMkDirs(outDir)
print("Downloading Things to: {}".format(outDir))


# Dump pretty JSON Thing list to manifest file
# Rewrite this file if it exists since there may be new/removed Things
with open(manifestFile, "w") as MF:
	MF.write(json.dumps(thingList, indent=4))


# Iterate over Things
# curl -s -X GET -H 'Authorization: Bearer TOKEN' 'https://api.thingiverse.com/things/3831194'
for thing in thingList:
    thingId = thing['id']
    print(thingId, flush=True)

    # Store Thing data in thingFileName in its directory
    # Rewrite this file if it exists since the Thing details may have changed
    thingDataFile = outDir + "/" + str(thingId) + "/" + thingFileName
    thingData = getAuthedUrl(apiUrl + "/things/" + str(thingId), "json") 
    checkMkDirs(outDir + "/" + str(thingId))
    with open(thingDataFile, "w") as TF:
        TF.write(json.dumps(thingData, indent=4))
    print("Wrote Thing metadata", flush=True)

    # Get object files for a thing
    dlCount = getFiles(thingId)
    print("Downloaded {} objects for Thing {}".format(dlCount, thingId), flush=True)

    # Get photos of a thing
    dlCount = getPhotos(thingId)
    print("Downloaded {} photos for Thing {}".format(dlCount, thingId), flush=True)

print("Done!")

